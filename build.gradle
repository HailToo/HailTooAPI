buildscript {
	ext {
		springBootVersion = '1.3.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "net.saliman:gradle-cobertura-plugin:2.3.2" 
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'maven'
apply plugin: 'net.saliman.cobertura'

ext {
    mainClassName = 'edu.hail.BootApplication'
    appName = 'HailToo'
}

configurations {
	providedRuntime
}

jar {
	baseName = "${appName}"
	version = "${version}"
}

test {
}

cobertura {
	coverageFormats = ['html', 'xml']              
	coverageIgnoreTrivial = true                   
	coverageIgnores = ['org.slf4j.Logger.*']           
	coverageReportDir = file("$buildDir/reports/cobertura")    
	
}

test.finalizedBy(project.tasks.cobertura)

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('io.jsonwebtoken:jjwt:0.6.0')
    compile('com.google.code.gson:gson:2.6.2')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.easymock:easymock:3.4')
	testCompile('org.mockito:mockito-all:1.10.19')
	providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
}

bootRun {
    //deploy static resources in-place
	addResources = true
}

task bootDebug(type: org.springframework.boot.gradle.run.BootRunTask) {
    doFirst() {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000'
    }
    
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.12'
}

task createApplicationProperties() {
	def props = new Properties()
	props.put('server.port', '8454')
	props.put('server.context-path', '/hail/')
	props.put('spring.mvc.throw-exception-if-no-handler-found', 'true')
	
	//volatile properties (change per build)
	props.put('application.version', project['version'])
	
	def file = new File("${projectDir}/src/main/resources/application.properties")
	props.store(file.newWriter(), "$appName properties")
}
build.dependsOn createApplicationProperties

uploadArchives {
    repositories.mavenDeployer {
        //configuration = configurations.deployerJars
        if(deploymentEnabled()) {
        	repository(url: "scp://${deployUrl}/${deployPath}") {
            	authentication(userName: "${deployUser}", privateKey: "${deployKey}")
        	}
        }
    }
}

task deploy(type: Exec) {
	dependsOn build
	def cmd = ""
	executable "sh"
	if(deploymentEnabled()) {
		cmd = "ssh -i $deployKey $deployUser@$deployUrl '\
					mkdir -p /home/$deployUser/jarchive;\
					kill -9 \$(cat /home/$deployUser/boot.pid); \
					mv /home/$deployUser/HailToo-*.jar /home/$deployUser/jarchive/ || true;';\
				scp -i $deployKey build/libs/HailToo-${version}.jar $deployUser@$deployUrl:$deployPath;\
				ssh -i $deployKey $deployUser@$deployUrl '\
					nohup java -jar /home/$deployUser/HailToo-${version}.jar </dev/null >/home/$deployUser/boot.out 2>&1 & echo \$! >/home/$deployUser/boot.pid'"
	} else {
		cmd = "echo 'Unable to deploy without neccessary values in gradle.properties.' && false;"
	}
	args "-c", cmd
}

def deploymentEnabled() {
 return project.hasProperty('deployUrl') && project.hasProperty('deployPath') && project.hasProperty('deployUser') && project.hasProperty('deployKey')
}